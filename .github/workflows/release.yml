name: Release

on:
  # Un tag v* déclenche la release (ex: v1.2.3, v2.0.0-rc1)
  push:
    tags: [ 'v*' ]
  # Déclenchement manuel (utile pour rejouer une build sur un tag existant)
  workflow_dispatch: {}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write   # créer la release + upload des assets
  id-token: write   # (optionnel) si vous signez via OIDC, non utilisé ici

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  # Liste des binaires à packager (adapter selon vos crates/outil)
  RELEASE_BINS: "vitte-cli vitte-compiler vitc vitcc vit-pm vitte-bench vitte-doc vitte-fmt vitte-profile vitx vitxx"

jobs:
  prelim:
    name: Pre-check (fmt, clippy, tests rapides)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: rustfmt (check)
        run: cargo fmt --all -- --check

      - name: clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: unit tests (no default features)
        run: cargo test --all --locked --no-default-features

  create_release:
    name: Create GitHub Release (notes auto)
    runs-on: ubuntu-latest
    needs: prelim
    steps:
      - uses: actions/checkout@v4

      - name: Compute tag/version
        id: ver
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION="${TAG#v}"
          PRERELEASE="false"
          case "$TAG" in
            *-alpha*|*-beta*|*-rc*) PRERELEASE="true" ;;
          esac
          echo "tag=$TAG"       >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Create release (or update if exists)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.tag }}
          name: ${{ steps.ver.outputs.tag }}
          generate_release_notes: true
          prerelease: ${{ steps.ver.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build & Package (${{ matrix.target }})
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux (glibc)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          # Linux (static/musl) — utile pour distribuer sans glibc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          # macOS Apple Silicon
          - os: macos-14
            target: aarch64-apple-darwin
            archive: tar.gz
          # Windows MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable + target)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Extra deps (musl only)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          echo "RUSTFLAGS=-C target-feature=-crt-static" >> $GITHUB_ENV || true

      - name: Compute version
        id: ver
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION="${TAG#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Build (release)
        shell: bash
        run: |
          set -euxo pipefail
          cargo build --release --locked --target ${{ matrix.target }}
          # Option : build tous les bins en une fois
          # cargo build --release --locked --target ${{ matrix.target }} --bins

      - name: Package binaries
        id: pkg
        shell: bash
        run: |
          set -euxo pipefail
          VERSION="${{ steps.ver.outputs.version }}"
          TARGET="${{ matrix.target }}"
          OUTDIR="dist"
          mkdir -p "$OUTDIR"

          # Split liste de binaires
          read -ra BINS <<< "${RELEASE_BINS}"

          # Pour chaque binaire attendu, s'il existe, on le pack
          PKGS=()
          for BIN in "${BINS[@]}"; do
            # extension windows
            EXT=""
            case "$TARGET" in
              *windows*) EXT=".exe" ;;
            esac

            BINPATH="target/${TARGET}/release/${BIN}${EXT}"
            [ -f "$BINPATH" ] || continue

            # Fabrique un dossier propre
            PKGDIR="${BIN}-${VERSION}-${TARGET}"
            mkdir -p "$PKGDIR"
            cp "$BINPATH" "${PKGDIR}/"
            # Ajoute licence et readme si présents
            for F in LICENSE LICENSE-MIT LICENSE-APACHE README.md; do
              [ -f "$F" ] && cp "$F" "${PKGDIR}/" || true
            done

            # Archive selon l’OS
            case "${{ matrix.archive }}" in
              tar.gz)
                tar -czf "${OUTDIR}/${PKGDIR}.tar.gz" "${PKGDIR}"
                PKGS+=("${OUTDIR}/${PKGDIR}.tar.gz")
                ;;
              zip)
                7z a -tzip "${OUTDIR}/${PKGDIR}.zip" "${PKGDIR}" >/dev/null
                PKGS+=("${OUTDIR}/${PKGDIR}.zip")
                ;;
            esac

            # SHA256
            for A in "${OUTDIR}/${PKGDIR}".*; do
              shasum -a 256 "$A" > "${A}.sha256"
              PKGS+=("${A}.sha256")
            done
          done

          # Exporte la liste (séparée par \n) pour upload
          printf "%s\n" "${PKGS[@]}" > pkglist.txt
          echo "pkglist=pkglist.txt" >> "$GITHUB_OUTPUT"

      - name: Upload assets to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pkg.outputs.pkglist }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_crates:
    name: Publish to crates.io (optional)
    needs: build
    runs-on: ubuntu-latest
    if: ${{ secrets.CRATES_IO_TOKEN != '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      # ⚠️ Adapte la liste -p selon ce que tu publies réellement
      - name: Cargo publish (best-effort)
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          set -euxo pipefail
          # Publie d’abord les libs internes si besoin, puis les bins.
          # Exemple (adapter à votre workspace) :
          # cargo publish -p vitte-core
          # cargo publish -p vitte-runtime
          # cargo publish -p vitte-compiler
          # cargo publish -p vitte-cli
          echo "Nothing to publish by default — configure packages in this step."
