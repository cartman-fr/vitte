name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  # ⚡ Feedback en <1min : format + clippy (Linux stable)
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: rustfmt check
        run: cargo fmt --all -- --check

      - name: clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

  # 🧪 Build & tests sur une matrice d’OS/targets + features
  test:
    name: Test (${{ matrix.os }} • ${{ matrix.toolchain }} • f=${{ matrix.features }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
        toolchain: [stable]
        features: [ "", "checksum", "compress", "checksum,compress" ]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (${{ matrix.toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --locked --no-default-features ${{ fromJSON(matrix.features != '' && format('--features "{0}"', matrix.features) || '') }}

      - name: Test
        run: cargo test --all --locked --no-default-features ${{ fromJSON(matrix.features != '' && format('--features "{0}"', matrix.features) || '') }}

  # ⛓️ MSRV : la version minimale supportée (à fixer selon ton projet)
  msrv:
    name: MSRV (1.74.0)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.74.0

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (no default features)
        run: cargo build --locked --no-default-features

      - name: Test (no default features)
        run: cargo test  --locked --no-default-features

  # 🧹 Verifs supplémentaires (doc + examples) sur Linux
  extras:
    name: Extras (doc, examples)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Doc build (no-deps)
        run: RUSTDOCFLAGS="-D warnings" cargo doc --no-deps

      - name: Examples build (si présents)
        run: |
          if cargo run --example 2>/dev/null; then
            echo "examples OK"
          else
            echo "no examples or run failed (non-blocking)"; exit 0
          fi
