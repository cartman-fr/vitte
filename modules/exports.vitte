//! modules/exports.vitte — Façade unique pour toute la boîte à outils
//!
//! Objectif : un seul import dans tes apps/bins/tests :
//!     use exports::prelude::*;
//!
//! Modules fournis (35+) : log, config, metrics, taskpool, cache, kvstore,
//! http_client, eventbus, feature_flags, validate, cli, channel, scheduler,
//! retry, rate_limiter, idgen, uuid, random, csv, ini, yaml_lite, checksum,
//! rle, pool, prioq, fs_atomic, supervisor, plugin, migrate, tracing,
//! pagination, result_ext, stringx, mathx, graph.
//!
//! Tous les modules sont autonomes. Ajoute/retire librement ici selon ton projet.

#![version("0.1.0")]
#![strict]
#![warn("unused","dead_code")]

/* ———————————————————————————————————————————————————————————
 * Déclarations de modules (même dossier, *.vitte)
 * ——————————————————————————————————————————————————————————— */
pub mod log;
pub mod config;
pub mod metrics;
pub mod taskpool;
pub mod cache;
pub mod kvstore;
pub mod http_client;
pub mod eventbus;
pub mod feature_flags;
pub mod validate;

pub mod cli;
pub mod channel;
pub mod scheduler;
pub mod retry;
pub mod rate_limiter;
pub mod idgen;
pub mod uuid;
pub mod random;
pub mod csv;
pub mod ini;
pub mod yaml_lite;
pub mod checksum;
pub mod rle;
pub mod pool;
pub mod prioq;
pub mod fs_atomic;
pub mod supervisor;
pub mod plugin;
pub mod migrate;
pub mod tracing;
pub mod pagination;
pub mod result_ext;
pub mod stringx;
pub mod mathx;
pub mod graph;

/* ———————————————————————————————————————————————————————————
 * Prelude — le “panier” d’imports que tu utilises partout
 * ——————————————————————————————————————————————————————————— */
pub mod prelude {
    // Journalisation
    pub use crate::log::{
        Logger, Level, Format, Sink, init_global as log_init,
        info, warn, error, debug, trace,
    };

    // Config (builder, vue/scopes, watcher)
    pub use crate::config::{
        Config,
        Builder as ConfigBuilder,
        ConfigView,
        WatchHandle as ConfigWatchHandle,
    };

    // Métriques
    pub use crate::metrics::{Registry as MetricsRegistry, Counter, Gauge, Histogram};

    // Threading & tâches
    pub use crate::taskpool::TaskPool;
    pub use crate::channel::Channel;
    pub use crate::scheduler::{Scheduler, Rule as ScheduleRule, Task as ScheduleTask};

    // Structures & caches
    pub use crate::cache::{TtlLru, SharedTtlLru};
    pub use crate::pool::Pool;
    pub use crate::prioq::PriQ;

    // Stockage / IO
    pub use crate::kvstore::Kv;
    pub use crate::fs_atomic::{write_atomic, Lock as FsLock, lock as fs_lock};

    // Réseau
    pub use crate::http_client::{Client as HttpClient, Resp as HttpResp};

    // Orchestration / supervision
    pub use crate::supervisor::{Spec as SupervisorSpec, run as supervise};
    pub use crate::plugin::{register as plugin_register, call as plugin_call, Plugin};
    pub use crate::migrate::{Plan as MigratePlan, Step as MigrateStep};

    // Domaines utilitaires
    pub use crate::eventbus::{
        EventBus, Event, SubOptions as EventSubOptions, Subscription as EventSubscription,
        DropPolicy as EventDropPolicy,
    };
    pub use crate::feature_flags::{FlagSet, Flag};
    pub use crate::validate;
    pub use crate::pagination::{Page, paginate};

    // Algos & nombres
    pub use crate::retry::{retry, Backoff};
    pub use crate::rate_limiter::TokenBucket;
    pub use crate::idgen::Snowflake;
    pub use crate::uuid as uuid4; // v4()
    pub use crate::random;
    pub use crate::checksum::{
        adler32, murmur3_32, fnv1a32,
        Adler32, Murmur3_32, Fnv1a32,
        Hash32, hash32, hash_file,
        RollingAdler32,
    };
    pub use crate::rle;
    pub use crate::mathx::{clamp, lerp, mean, median, stddev};
    pub use crate::graph::Graph;

    // Formats
    pub use crate::csv::{
        Csv, Options as CsvOptions, Table as CsvTable, Record as CsvRecord, RowView as CsvRow,
        parse as csv_parse, write as csv_write, write_with as csv_write_with,
        sniff_delimiter as csv_sniff_delimiter,
    };
    pub use crate::ini;
    pub use crate::yaml_lite;

    // Traces & strings
    pub use crate::tracing::{span, event, Span};
    pub use crate::stringx::{slugify, levenshtein, truncate_middle};

    // Ergonomie Result/Option
    pub use crate::result_ext::{ResultExt, OptionExt};

    // CLI haut-niveau (avec specs)
    pub use crate::cli::{
        App as CliApp, Cmd as CliCmd, Ctx as CliCtx,
        FlagSpec as CliFlag, OptSpec as CliOpt, PosSpec as CliPos,
    };
}

/* ———————————————————————————————————————————————————————————
 * Helpers “qualité de vie” (optionnels)
 * ——————————————————————————————————————————————————————————— */

/// Initialise un logger texte “raisonnable” si rien n’est configuré.
/// Usage : `exports::init_default_logging("myapp", log::Level::Info);`
pub fn init_default_logging(app: str, level: log::Level) {
    let lg = log::Logger::new(app)
        .level(level)
        .format(log::Format::Text)
        .add_sink(log::Sink::Stderr);
    log::init_global(lg);
}

/// Exporte un registre de métriques global (optionnel).
static mut METRICS: Option<metrics::Registry> = None;
pub fn metrics() -> &'static metrics::Registry {
    unsafe {
        if METRICS.is_none() { METRICS = Some(metrics::Registry::new()); }
        METRICS.as_ref().unwrap()
    }
}

/// Helper express : construit une config “classique”
/// - ENV (préfixe) → fichier principal (optionnel) → overrides
pub fn build_config(prefix: str, main_path: Option<str>, overrides: Option<std::collections::Map<str,std::json::Value>>) -> Result<config::Config, str> {
    let mut b = config::Config::builder().env(prefix);
    if let Some(p)=main_path { b = b.file_optional(p); }
    if let Some(m)=overrides { b = b.overrides(m); }
    b.build()
}
