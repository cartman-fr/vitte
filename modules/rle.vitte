//! rle.vitte â€” run-length encoding (octets)

#![version("0.1.0")]
#![strict]

pub fn encode(data:&[u8])->Vec<u8>{
    let mut out=Vec<u8>::new(); if data.is_empty(){return out;}
    let mut cur=data[0]; let mut run=1usize;
    for &b in &data[1..]{
        if b==cur && run<255 { run+=1; } else { out.push(cur); out.push(run as u8); cur=b; run=1; }
    }
    out.push(cur); out.push(run as u8); out
}
pub fn decode(data:&[u8])->Vec<u8>{
    let mut out=Vec<u8>::new(); let mut i=0;
    while i+1<data.len(){ let val=data[i]; let cnt=data[i+1]; let mut k=0; while k<cnt { out.push(val); k+=1; } i+=2; }
    out
}
