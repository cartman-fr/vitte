//! migrate.vitte — exécute des migrations (id, up/down), consigne un journal.

#![version("0.1.0")]
#![strict]

pub struct Step { pub id:u32, pub name:str, pub up: fn()->Result<(),str>, pub down: fn()->Result<(),str> }
pub struct Plan { pub steps: Vec<Step>, pub journal: str }

impl Plan {
    pub fn new(journal:str)->Self{ Self{ steps:Vec::new(), journal } }
    pub fn add(mut self, s:Step)->Self{ self.steps.push(s); self }
    pub fn applied(&self)->std::collections::Set<u32>{
        let mut set=std::collections::Set::new();
        if let Ok(txt)=std::fs::read_to_string(&self.journal){
            for l in txt.lines(){ if l.starts_with("APPLIED ") { if let Ok(id)=l[8..].parse::<u32>(){ set.insert(id);} } }
        }
        set
    }
    pub fn up(self)->Result<(),str>{
        let mut set=self.applied();
        for s in self.steps.iter().sorted_by(|a,b| a.id.cmp(&b.id)) {
            if set.contains(s.id){ continue; }
            (s.up)()?; std::fs::append(&self.journal, format!("APPLIED {}\n", s.id).as_bytes()).map_err(|e| format!("{}",e))?;
        }
        Ok(())
    }
}
