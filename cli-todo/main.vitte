#![version("0.1.0")]
#![strict]                // Active les vérifications strictes
#![warn("unsafe_ops")]    // Avertir si utilisation d’opérations dangereuses

// Importations depuis la bibliothèque standard
use std::io;
use std::math::{sqrt, pow};
use std::time::{now, sleep};

// Définition d’une constante globale
const PI: f64 = 3.141592653589793;

// Définition d’un type structuré
struct Point {
    x: f64,
    y: f64
}

// Implémentation de méthodes sur Point
impl Point {
    fn distance(self, other: Point) -> f64 {
        sqrt(pow(self.x - other.x, 2.0) + pow(self.y - other.y, 2.0))
    }
}

// Fonction utilitaire
fn circle_area(radius: f64) -> f64 {
    PI * pow(radius, 2.0)
}

// Point d’entrée principal
fn main(args: [str]) -> int {
    println("=== Programme Vitte — Démo ===");

    // Lecture utilisateur
    print("Entrer le rayon d’un cercle : ");
    let radius_str = io::read_line().trim();
    let radius = radius_str.parse::<f64>()
        .unwrap_or_else(|| {
            eprintln("Valeur invalide, utilisation de 1.0 par défaut.");
            return 1.0;
        });

    // Calcul d’aire
    let area = circle_area(radius);
    println("Aire du cercle : {area}");

    // Utilisation de la struct Point
    let p1 = Point { x: 0.0, y: 0.0 };
    let p2 = Point { x: radius, y: radius };
    println("Distance entre p1 et p2 : {p1.distance(p2)}");

    // Affichage de l’heure
    println("Heure actuelle : {now()}");

    // Pause pour effet dramatique
    sleep(1s);
    println("Fin du programme.");

    return 0;
}
